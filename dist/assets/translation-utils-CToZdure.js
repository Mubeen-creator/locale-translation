import{a as l}from"./route-auth-login-BCIYBGhu.js";const i=new Map,a={debug:(t,...n)=>{},warn:(t,...n)=>{console.warn(`[TranslationUtils] ${t}`,...n)},error:(t,...n)=>{console.error(`[TranslationUtils] ${t}`,...n)}};async function c(t,n="en"){const s=`${n}:${t}`;if(i.has(s))return a.debug(`fetchDynamicTranslation: Using cached translation for key '${t}'`),i.get(s);a.debug(`fetchDynamicTranslation: Fetching translation for key '${t}' in locale '${n}'`);try{const{t:e}=l(),r=e(t,t);return r&&r!==t?(i.set(s,r),a.debug(`fetchDynamicTranslation: Found translation '${r}' for key '${t}'`),r):(a.debug(`fetchDynamicTranslation: No translation found, returning key '${t}'`),t)}catch(e){return a.error(`fetchDynamicTranslation: Error fetching translation for key '${t}':`,e),t}}async function u(t="en"){const n=document.querySelectorAll("[data-translate]");if(n.length===0){a.debug("triggerTranslationForElements: No elements with data-translate found");return}a.debug(`triggerTranslationForElements: Found ${n.length} elements to translate`);const s=Array.from(n).map(async e=>{const r=e.getAttribute("data-translate");if(r)try{const o=await c(r,t);o&&o!==r&&(e.textContent=o,a.debug(`triggerTranslationForElements: Translated '${r}' to '${o}'`))}catch(o){a.error(`triggerTranslationForElements: Failed to translate '${r}':`,o)}});await Promise.all(s),a.debug("triggerTranslationForElements: Completed translation of all elements")}export{u as t};
//# sourceMappingURL=translation-utils-CToZdure.js.map
